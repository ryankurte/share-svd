extern crate svd_parser;

use std::*;
use std::cmp::*;

use types::access::*;
use types::bit_range::*;

#[derive(Ord, Eq, PartialOrd, PartialEq, Clone)]
pub struct Field {
    // field name is part of the Rust types generated by svd2rust
    pub name: String,

    // ignore description

    // if bit_range is different, the field implementation is
    // incompatible
    pub bit_range: BitRange,

    // according to CMSIS spec, access must have been defined by
    // register level at the latest, so this doesn't need to be an
    // Option
    pub access: Access,

    // ignore enumerated_values because a field with enum values can be
    // freely substituted in place of one without
    //pub enumerated_values: Vec<svd_parser::EnumeratedValues>,

    // ignore write_constraint
    // XXX: is this good?
}

impl Field {
    pub fn new(
        field: svd_parser::Field,
        default_access: Option<svd_parser::Access>,
    ) -> Result<Field, String> {
        Ok(Field {
            name: field.name.clone(),
            bit_range: field.bit_range.into(),
            access: field
                .access
                .or(default_access)
                .ok_or_else(|| format!("missing access for {}", field.name))?
                .into(),
            //enumerated_values: field.enumerated_values,
        })
    }
}
