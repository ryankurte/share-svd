extern crate svd_parser;

use std::*;
use std::cmp::*;

use types::traits::*;
 use types::fields::*;

#[derive(Ord, Eq, PartialOrd, PartialEq, Clone)]
pub struct RegisterInfo {
    // register name is part of the Rust types generated by svd2rust
    pub name: String,

    // ignore description
    pub address_offset: u32,

    pub size: u32,

    // access is pushed down into individual fields
    pub reset_value: u32,

    pub reset_mask: u32,

    pub fields: Option<Vec<Field>>,

    // ignore write_constraint
    // XXX: is this good?
}

impl RegisterInfo {
    pub fn new(
        register: svd_parser::RegisterInfo,
        defaults: &svd_parser::Defaults,
    ) -> Result<RegisterInfo, String> {
        let name = register.name;
        let default_access = register.access.or(defaults.access);
        Ok(RegisterInfo {
            name: name.clone(),
            address_offset: register.address_offset,
            size: register
                .size
                .or(defaults.size)
                .ok_or_else(|| format!("missing size in {}", name))?,
            reset_value: register
                .reset_value
                .or(defaults.reset_value)
                .ok_or_else(|| format!("missing reset value in {}", name))?,
            reset_mask: register
                .reset_mask
                .or(defaults.reset_mask)
                .ok_or_else(|| format!("missing reset mask in {}", name))?,
            fields: match register.fields {
                Some(fields) => Some(fields
                    .into_iter()
                    .map(|field| Field::new(field, default_access))
                    .collect::<Result<Vec<Field>, String>>()?),
                None => None,
            },
        })
    }
}
